match mut x <- literal {
    type null | nil:
    type
    | true
    | false:
        aaa;
        bbb;
        ccc;
    type false:
    type none:        # variable = none
    type None:        # variant  = Option::None
    type Option⸬None: # variant  = Option::None
    type 0:
    type 1:
    type 2:
    type "":
    type '':
}

match tuple {
    type ():
    type (Type):
    type (Type, ):
    type Tuple(Type, Type):
    type Tuple((Type, Type), Type):
    type Tuple(Some(Type), ⁜Unite⸬Variant):
}

match array {
    type []:
    type [Type]:
    type [Type, ]:
    type [Unite⸬Variant]:
    type [[Type], Type]:
    type [[Type], [Type]]:
    type [[Type, Type], Type]:
    type [[[Type], Type], Type]:
}

match `object` {
    type Type:
    type {a: Type}:
    type {a: Type, }:
    type {a: Type, b: Type}:
    type Object {a: Type, b: Type}:
    type Object {a: {a: _, b: _}, c: Type}:
    type Object {a: Some(_), b: Type}:
}

