match literal {
    case null:
    case nil:
    case true | false:
    case none:        \\ variable = none
    case None:        \\ variant  = Option::None
    case Option⸬None: \\ variant  = Option::None
    case let None:    \\ variable = None
    case 0:
    case 1:
    case 2:
    case "":
    case '':
}

match tuple {
    case ():
    case (a) | (a, ) if a > 0:
    case (mut a, ref b):
    case Tuple(a, b):
    case Tuple((a, b), c):
    case Tuple(Some(a), ⁜Unite⸬Variant):
}

match array {
    case []:
    case [a, ]:
    case [mut a, b]:
    case [none]:
    case [Unite⸬Variant]:
    case [[a], b]:
    case [[a], [b]]:
    case [[a, b], c]:
    case [[[a], b], c]:
}


match `object` {
    case a:
    case {a}:
    case {a, }:
    case {a, b}:
    case Object {a, b}:
    case Object {a ← {a, b}, c}:
    case Object {a ← Some(b), b}:
}
