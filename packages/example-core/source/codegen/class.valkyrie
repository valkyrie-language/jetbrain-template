#primitive(anyref)
class AnyType {}

#primitive(structref)
class Dynamic {}

#primitive(arrayref)
class AnyArray {}

#primitive(array)
class Array⟨T⟩ {

}


// (type (struct))
struct EmptyStruct {}

// (type (struct (field)))
struct SingleFieldStruct {
    field: (),
}

// (type (struct (field i8)))
struct SingleI8FieldStruct {
    field: i8,
}

// (type (struct (field i8 i8 i8 i8)))
struct FourI8FieldsStruct {
    field1: i8,
    field2: i8,
    field3: i8,
    field4: i8,
}

// (type (struct (field $x1 i32) (field $y1 i32)))
struct TwoI32FieldsStruct {
    x1: i32,
    y1: i32,
}

// (type (struct (field i8 i16 i32 i64 f32 f64 anyref funcref (ref 0) (ref null 1))))
struct MixedFieldsStruct {
    field1: i8,
    field2: i16,
    field3: i32,
    field4: i64,
    field5: f32,
    field6: f64,
    field7: (), // anyref
    field8: (), // funcref
    field9: Option⟨Box⟨EmptyStruct⟩⟩, // (ref 0)
    field10: Option⟨()⟩, // (ref null 1)
}

// (type (struct (field i32 i64 i8) (field) (field) (field (ref null i31) anyref structref arrayref)))
struct ComplexStruct {
    field1: (i32, i64, i8),
    field2: (),
    field3: (),
    field4: Option⟨()⟩, // (ref null i31)
    field5: (), // anyref
    field6: (), // structref
    field7: (), // arrayref
}




// (type (struct (field $x2 i32) (field f32 f64) (field $y2 i32)))
struct NamedFieldsStruct {
    x2: i32,
    field1: (f32, f64),
    y2: i32,
}



#instruction("data")
trait AnyData {

}

⍝? static utf8 string
#instruction("data")
class Utf8Data: AnyData {

}

class Utf8Text {
    private _ptr: Array⟨u8⟩
    private _len: usize
}

#instruction
class Ascii {
    constructor(code_point: u8) {

    }
}



class Utf8View {
    private _text: Array⟨u8⟩
}
class Utf8Span {
    private _text: Array⟨u8⟩
    private _span: Range⟨usize⟩
}
